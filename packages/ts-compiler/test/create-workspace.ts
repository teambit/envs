import { getCapsuleName } from '../src/utils'
import { promises as fs } from 'fs'
import mkdirp, { Options } from 'mkdirp'
import path from 'path'

export async function createWorkspace(content: WorkspaceContent, options:WorkspaceOptions): Promise<string> {
  // TODO: fix this by providing getCapsuleName with a CompilerContext
//    const targetDir = getCapsuleName('space')
//    enrichContentWithDefaults(content, options)
//
//    await mkdirpPromise(targetDir, {})
//    await Object.keys(content).map( async key => {
//        const containingFolder = path.dirname(key)
//        await mkdirpPromise(containingFolder, {})
//        const filePath = path.resolve(targetDir, key)
//        await fs.writeFile(filePath, content[key])
//    })
//
//    // insert actions on workspace
//    return targetDir
  return Promise.resolve('foo')
}
export interface WorkspaceOptions {
    env: string, 
}
export interface WorkspaceContent {
    [k: string]: string 
}

export function mkdirpPromise(dir: string, opts: Options) {
    return new Promise((resolve, reject) => {
        mkdirp(dir, opts, (err, made) => err === null ? resolve(made) : reject(err))
    })
}

function enrichContentWithDefaults(content: WorkspaceContent, options: WorkspaceOptions) {
    content['package.json'] = content['package.json'] || JSON.stringify({
        bit: {
            env: {
              compiler: {
                  meta: {
                      options: {
                          file: options.env
                      }
                  }
              }
            },
            componentsDefaultDirectory: 'components/{name}',
            packageManager: 'npm'
          }
    }, null, 4)
    
    content['.bitmap'] = content['.bitmap'] || `/* THIS IS A BIT-AUTO-GENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */
    
    ${JSON.stringify({"version": "14.3.0"}, null, 4)}`
    
    content['.gitignore'] =  content['.gitignore'] || `dist\nnode_modules\n`
}
